name: 'Cloud Resume Challenge Testing and Infrastructure Deployment'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'Backend/**'
      - 'Frontend/**'
      

jobs:
  Check-Changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Path Filter
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'Backend/**'
            frontend:
              - 'Frontend/**'
      - name: Debug Outputs
        run: |
          echo "Backend changes: ${{ steps.changes.outputs.backend }}"
          echo "Frontend changes: ${{ steps.changes.outputs.frontend }}"

  Lambda-Testing:
    runs-on: ubuntu-latest
    needs: Check-Changes
    name: Lambda Backend Testing
    if: ${{ needs.Check-Changes.outputs.backend == 'true' }}
    env:
      AWS_DEFAULT_REGION: us-west-2
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Python Dependency Installation
        run: |
          python3 -m pip install --upgrade pip
          pip3 install moto
      - name: Run unit test
        run: |
          python3 ./Backend/Tests/visitor-counter-test.py
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-west-2'
      - name: Zip and upload verfied code to S3
        run: |
          cd ./Backend/Tests
          zip updateVisitorCount.zip lambda_function.py
          aws s3 cp updateVisitorCount.zip s3://visitor-counter-lambda-function-0239458/

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: 
      - Lambda-Testing
      - Check-Changes
    if: ${{ needs.Check-Changes.outputs.backend == 'true' }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3.5.3
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-west-2'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2.0.3
      - name: 'Terraform Init'
        run: |
          cd Backend
          terraform init -backend-config="bucket=$TF_STATE_S3" -backend-config="region=$AWS_REGION" -backend-config="key=$TF_STATE_S3_KEY" -backend-config="dynamodb_table=$TF_DB_LOCK" -backend-config="encrypt=true"
        env:
            AWS_REGION: 'us-west-2'
            TF_STATE_S3: ${{ secrets.TF_STATE_S3 }}
            TF_STATE_S3_KEY: ${{ secrets.TF_STATE_S3_KEY }}
            TF_DB_LOCK: ${{ secrets.TF_DB_LOCK }}
      - name: 'Terraform Validate'
        run: |
          cd Backend
          terraform validate
      - name: 'Terraform Plan'
        run: |
          cd Backend
          terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: | 
          cd Backend
          terraform apply -auto-approve -input=false
        env:
          AWS_REGION: 'us-west-2'
          TF_STATE_S3: ${{ secrets.TF_STATE_S3 }}
          TF_STATE_S3_KEY: ${{ secrets.TF_STATE_S3_KEY }}
          TF_DB_LOCK: ${{ secrets.TF_DB_LOCK }}
  
  cf-cdn-cache-invalidation:
    runs-on: ubuntu-latest
    needs:
      - Check-Changes
      - terraform
    if: ${{ needs.Check-Changes.outputs.frontend == 'true' || needs.Check-Changes.outputs.backend == 'true' }}
    name: CloudFront Cache Invalidation
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v3.5.3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-west-2'
      - name: Invalidate CloudFront Cache
        run: |
          AWS_CF_DISTRIBUTION_ID=$(aws cloudfront list-distributions --query 'DistributionList.Items[0].Id' --output text)
          aws cloudfront create-invalidation --distribution-id $AWS_CF_DISTRIBUTION_ID --paths "/*"
  
  HUGO-Build-and-S3-Deploy:
    runs-on: ubuntu-latest
    needs:
      - cf-cdn-cache-invalidation
      - Check-Changes
    if: ${{ needs.Check-Changes.outputs.frontend == 'true' || needs.Check-Changes.outputs.backend == 'true' }}
    name: Build HUGO Site and Deploy to S3
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v3.5.3
        with:
          submodules: false     
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.111.3'
          extended: true
      - uses: actions/setup-node@v2
        with:
          node-version: '20.1.0'
      - name: Install theme
        run: |
          cd Frontend
          npm install -g postcss-cli
          npm install -g autoprefixer
          npm install
      - name: Build Hugo Site and Generate Shippable CSS
        run: |
          cd Frontend/themes/chringel-hugo-theme
          postcss assets/css/styles.css --config assets/css/postcss.config.js > assets/css/build.css
          cd ../..
          hugo --environment production --minify
      - name: S3 Deploy
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-west-2'   
          SOURCE_DIR: './Frontend/public' 
